plugins {
    id 'com.diffplug.spotless' version '6.1.2' apply false
    id 'cz.augi.gradle.wartremover' version '0.14.2' apply false
    id 'info.solidsoft.pitest' version '1.7.0' apply false
    id 'java-platform'
    id 'me.champeau.jmh' version '0.6.6' apply false
    id 'net.ltgt.errorprone' version '2.0.2' apply false
    id 'net.researchgate.release' version '2.8.1'
    id 'ru.vyarus.animalsniffer' version '1.5.4' apply false
}

subprojects {
    apply plugin: 'java-library'
    apply from: rootProject.file('gradle/dependencies.gradle')
    apply from: rootProject.file('gradle/animal-sniffer.gradle')
    apply from: rootProject.file('gradle/check-checkstyle.gradle')
    apply from: rootProject.file('gradle/check-codecoverage.gradle')
    apply from: rootProject.file('gradle/check-errorprone.gradle')
    apply from: rootProject.file('gradle/publish-jar.gradle')
    apply from: rootProject.file('gradle/publish-maven.gradle')

    sourceCompatibility = JavaVersion.VERSION_1_6

    repositories {
        mavenCentral()
    }

    configurations {
        internal {
            visible = false
            canBeConsumed = false
            canBeResolved = false
        }
        compileClasspath.extendsFrom internal
        runtimeClasspath.extendsFrom internal
        testCompileClasspath.extendsFrom internal
        testRuntimeClasspath.extendsFrom internal
    }

    dependencies {
        internal platform(rootProject)
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    // after gradle 5.3 we need to set this attribute to mark test configuration targeting java 8
    [configurations.testCompileClasspath, configurations.testRuntimeClasspath].each {
        it.attributes {
            attribute(TargetJvmVersion.TARGET_JVM_VERSION_ATTRIBUTE, 8)
        }
    }

    compileTestJava {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    tasks.withType(JavaCompile) {
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = 8
        }
        options.compilerArgs << '-Xlint:all' << '-Xlint:-options' << '-Werror'
    }

    test {
        useJUnitPlatform()
    }

    javadoc {
        options.memberLevel = JavadocMemberLevel.PROTECTED

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
            options.addStringOption('-release', '8') // workaround javadoc issues in Java 9+
        }
    }
}

dependencies {
    constraints {
        api 'org.assertj:assertj-core:3.22.0'
        api 'org.dom4j:dom4j:2.1.3'
        api 'co.helmethair:scalatest-junit-runner:0.1.10'
        api 'com.google.code.gson:gson:2.8.9'
        api 'com.fasterxml.jackson.core:jackson-databind:2.13.1'
        api 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.1'
        api 'jakarta.json:jakarta.json-api:2.0.1'
        api 'org.glassfish:jakarta.json:2.0.1'
        api 'jaxen:jaxen:1.2.0'
        api 'org.jdom:jdom2:2.0.6.1'
        api 'org.junit.jupiter:junit-jupiter:5.8.2'
        api 'org.junit.platform:junit-platform-engine:1.8.2'
        api 'org.mockito:mockito-junit-jupiter:4.2.0'
        api 'xom:xom:1.3.7'
    }
}

release {
    preCommitText = '[skip ci]'
    git {
        requireBranch = '2.x'
    }
}

wrapper {
    gradleVersion = '7.3.3'
}
