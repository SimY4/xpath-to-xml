plugins {
    id 'net.ltgt.errorprone' version '0.0.14' apply false
    id 'ru.vyarus.animalsniffer' version '1.4.3' apply false
    id 'me.champeau.gradle.jmh' version '0.4.5' apply false
}

ext {
    jUnitVersion = '5.2.0'
    mockitoVersion = '2.18.3'
    assertjVersion = '3.10.0'
    errorproneVersion = '2.3.1'
    checkstyleVersion = '8.10'

    def buildTimeAndDate = new Date()
    buildDate = buildTimeAndDate.format("yyyy-MM-dd")
    buildTime = buildTimeAndDate.format("HH:mm:ss.SSSZ")
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'me.champeau.gradle.jmh'
    apply from: rootProject.file('gradle/animal-sniffer.gradle')
    apply from: rootProject.file('gradle/check-checkstyle.gradle')
    apply from: rootProject.file('gradle/check-codecoverage.gradle')
    apply from: rootProject.file('gradle/check-errorprone.gradle')
    apply from: rootProject.file('gradle/publish-jar.gradle')
    apply from: rootProject.file('gradle/publish-maven.gradle')

    sourceCompatibility = JavaVersion.VERSION_1_8

    repositories {
        mavenCentral()
    }

    dependencies {
        jmh configurations.testImplementation
    }

    test {
        useJUnitPlatform()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    jmh {
        jmhVersion = '1.21'
    }

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required {
            signatory != null && !(project.version =~ /-SNAPSHOT$/)
        }
        sign configurations.archives
    }

}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
}
