ext.moduleName = 'com.github.simych.xpath.scala'

buildDir = 'build-3'

ext {
    classesDir = file("/${buildDir}/classes/scala/main")
    testClassesDir = file("/${buildDir}/classes/scala/test")
    scaladocDir = file("/${buildDir}/docs/scaladoc")
}

clean {
    delete 'build-3'
}

configurations {
    dotc
}

sourceSets {
    main.java.srcDirs = [file('src/main/scala'), file('src/main/scala-2.13+'), file('src/main/scala-3+')]
    test.java.srcDirs = [file('src/test/scala'), file('src/test/scala-2.13+'), file('src/test/scala-3+')]
}

dependencies {
    api project(':xpath-to-xml-core')

    implementation 'org.scala-lang:scala3-library_3:3.0.0'
    implementation libraries.scalaXml('3')

    dotc 'org.scala-lang:scala3-compiler_3:3.0.0'
    dotc 'org.scala-lang:scaladoc_3:3.0.0'

    testImplementation project(':xpath-to-xml-test')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.assertj:assertj-core'
}

jar {
    from classesDir
}

def dottyCompilerOptions = [
        '-project',         project.name,
        '-project-url',     projectUrl,
        '-project-version', project.version,
        '-encoding',        'UTF-8',
        '-deprecation',
        '-explain',                             // Explain errors in more detail.
        '-explain-types',                       // Explain type errors in more detail.
        '-feature',                             // Emit warning and location for usages of features that should be imported explicitly.
        '-language:macros,implicitConversions',
        '-unchecked',                           // Enable additional warnings where generated code depends on assumptions.
        '-indent',                              // Allow significant indentation.
        '-Xfatal-warnings',                     // Fail the compilation if there are any warnings.
]

task compileScala(type: JavaExec) {
    dependsOn compileJava
    doFirst {
        if (!classesDir.exists()) classesDir.mkdirs()
    }
    description 'Compile Scala source files'
    classpath configurations.dotc, configurations.compileClasspath
    main 'dotty.tools.dotc.Main'
    jvmArgs '-Dscala.usejavacp=true'
    args dottyCompilerOptions + ['-d', classesDir] + sourceSets.main.allSource.filter { it.name.endsWith('.scala') }.files
}

task compileTestScala(type: JavaExec) {
    dependsOn compileScala, compileTestJava
    doFirst {
        if (!testClassesDir.exists()) testClassesDir.mkdirs()
    }
    description 'Compile Scala test source files'
    classpath configurations.dotc, configurations.testCompileClasspath, classesDir
    main 'dotty.tools.dotc.Main'
    jvmArgs '-Dscala.usejavacp=true'
    args dottyCompilerOptions + ['-d', testClassesDir] + sourceSets.test.allSource.filter { it.name.endsWith('.scala') }.files
}

task scaladoc(type: JavaExec) {
    dependsOn compileScala
    doFirst {
        if (!scaladocDir.exists()) scaladocDir.mkdirs()
    }
    description 'Generate docs'
    classpath configurations.dotc, configurations.compileClasspath, classesDir
    main 'dotty.tools.scaladoc.Main'
    jvmArgs '-Dscala.usejavacp=true'
    args '-d', scaladocDir, classesDir
}

build {
    dependsOn compileScala
}

test {
    dependsOn compileTestScala
    classpath += configurations.testRuntimeClasspath + files(classesDir, testClassesDir)
    testClassesDirs += files(testClassesDir)
}

javadocJar {
    dependsOn scaladoc
    from scaladoc
}
