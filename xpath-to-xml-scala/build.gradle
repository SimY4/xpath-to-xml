ext {
    moduleName = 'com.github.simych.xpath.scala'
    if (Boolean.getBoolean('CI')) {
        allScalaVersions = true
    }
    scalaVersions = ['2.13.0-M5'
                     , '2.11.12'
                     , '2.12.8'
                    ].join(',')
    defaultScalaVersions = ['2.12.8'].join(',')
    runOnceTasks = ['clean'
                    , 'jmh'
                    , ':xpath-to-xml-core:compileJava'
                    , ':xpath-to-xml-core:check'
                    , ':xpath-to-xml-core:publish'
                    ].join(',')
}

apply plugin: 'scala'
apply plugin: 'com.adtran.scala-multiversion-plugin'
apply plugin: 'cz.alenkacz.gradle.scalafmt'
apply from: rootProject.file('gradle/benchmark-jmh.gradle')

dependencies {
    api project(':xpath-to-xml-core')

    implementation 'org.scala-lang:scala-library:%scala-version%'
    if (scalaVersion.startsWith('2.13')) {
        implementation 'org.scala-lang.modules:scala-xml_2.13.0-M5:[1.0, 2.0['
    } else {
        implementation 'org.scala-lang.modules:scala-xml_%%:[1.0, 2.0['
    }

    testImplementation project(':xpath-to-xml-test')
    if (scalaVersion.startsWith('2.13')) {
        testImplementation 'org.scala-lang.modules:scala-java8-compat_2.13.0-M5:[0.9,1.0['
    } else {
        testImplementation 'org.scala-lang.modules:scala-java8-compat_%%:[0.9,1.0['
    }
    testImplementation "org.junit.jupiter:junit-jupiter:$jUnitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
}

sourcesJar {
    from sourceSets.main.allSource
}

if (!scalaVersion.startsWith('2.13')) {
    javadocJar {
        dependsOn scaladoc
        from scaladoc
    }
}

tasks.withType(ScalaCompile) {
    if (scalaVersion.startsWith('2.11')) {
        scalaCompileOptions.optimize = true
    }
    scalaCompileOptions.additionalParameters = [
            '-deprecation',                      // Emit warning and location for usages of deprecated APIs.
            '-encoding', 'utf-8',                // Specify character encoding used by source files.
            '-explaintypes',                     // Explain type errors in more detail.
            '-feature',                          // Emit warning and location for usages of features that should be imported explicitly.
            '-language:implicitConversions',     // Allow definition of implicit functions called views
            '-unchecked',                        // Enable additional warnings where generated code depends on assumptions.
            '-Xcheckinit',                       // Wrap field accessors to throw an exception on uninitialized access.
            '-Xfatal-warnings',                  // Fail the compilation if there are any warnings.
            '-Xfuture',                          // Turn on future language features.
            '-Xlint',                            // Turn on linting.
            '-Ywarn-dead-code',                  // Warn when dead code is identified.
            '-Ywarn-numeric-widen',              // Warn when numerics are widened.
    ] + (!scalaVersion.startsWith('2.11') ? [
            '-opt:l:inline',
            '-opt-inline-from:**'
    ] : []) + (!scalaVersion.startsWith('2.13') ? [
            '-Yno-adapted-args'                  // Do not adapt an argument list (either by inserting () or creating a tuple) to match the receiver.
    ] : [])
}
