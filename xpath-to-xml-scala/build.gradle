ext {
    moduleName = 'com.github.simych.xpath.scala'
    scalaVersions = '2.11.12, 2.12.6'
    defaultScalaVersions = '2.12.7'
}

apply plugin: 'scala'
apply plugin: 'com.adtran.scala-multiversion-plugin'

dependencies {
    api project(':xpath-to-xml-core')

    implementation 'org.scala-lang:scala-library:%scala-version%'
    implementation 'org.scala-lang.modules:scala-xml_%%:1.1.1'

    testImplementation project(':xpath-to-xml-test')
    testImplementation 'com.nrinaudo:kantan.xpath_%%:0.4.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$jUnitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$jUnitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "org.mockito:mockito-junit-jupiter:$mockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jUnitVersion"
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
            "-deprecation",                      // Emit warning and location for usages of deprecated APIs.
            "-encoding", "utf-8",                // Specify character encoding used by source files.
            "-explaintypes",                     // Explain type errors in more detail.
            "-feature",                          // Emit warning and location for usages of features that should be imported explicitly.
            "-language:implicitConversions",     // Allow definition of implicit functions called views
            "-unchecked",                        // Enable additional warnings where generated code depends on assumptions.
            "-Xcheckinit",                       // Wrap field accessors to throw an exception on uninitialized access.
            "-Xfatal-warnings",                  // Fail the compilation if there are any warnings.
            "-Xfuture",                          // Turn on future language features.
            "-Xlint:adapted-args",               // Warn if an argument list is modified to match the receiver.
            "-Xlint:by-name-right-associative",  // By-name parameter of right associative operator.
            "-Xlint:delayedinit-select",         // Selecting member of DelayedInit.
            "-Xlint:doc-detached",               // A Scaladoc comment appears to be detached from its element.
            "-Xlint:inaccessible",               // Warn about inaccessible types in method signatures.
            "-Xlint:infer-any",                  // Warn when a type argument is inferred to be `Any`.
            "-Xlint:missing-interpolator",       // A string literal appears to be missing an interpolator id.
            "-Xlint:nullary-override",           // Warn when non-nullary `def f()' overrides nullary `def f'.
            "-Xlint:nullary-unit",               // Warn when nullary methods return Unit.
            "-Xlint:option-implicit",            // Option.apply used implicit view.
            "-Xlint:package-object-classes",     // Class or object defined in package object.
            "-Xlint:poly-implicit-overload",     // Parameterized overloaded implicit methods are not visible as view bounds.
            "-Xlint:private-shadow",             // A private field (or class parameter) shadows a superclass field.
            "-Xlint:stars-align",                // Pattern sequence wildcard must align with sequence component.
            "-Xlint:type-parameter-shadow",      // A local type parameter shadows a type already in scope.
            "-Xlint:unsound-match",              // Pattern match may not be typesafe.
            "-Ywarn-dead-code",                  // Warn when dead code is identified.
            "-Ywarn-inaccessible",               // Warn about inaccessible types in method signatures.
            "-Ywarn-infer-any",                  // Warn when a type argument is inferred to be `Any`.
            "-Ywarn-nullary-override",           // Warn when non-nullary `def f()' overrides nullary `def f'.
    ]
}

compileTestScala {
    scalaCompileOptions.additionalParameters << '-target:jvm-1.8'
}